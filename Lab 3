from abc import ABC, abstractmethod


class Transport(ABC):
    @abstractmethod
    def move(self):
        pass


class Car(Transport):
    def move(self):
        print("Автомобиль едет по дороге")

class Bicycle(Transport):
    def move(self):
        print("Велосипед едет по тропе")

class Plane(Transport):
    def move(self):
        print("Самолет летит в небе")


class TransportFactory:
    @staticmethod
    def create_transport(transport_type):
        if transport_type == "car":
            return Car()
        elif transport_type == "bicycle":
            return Bicycle()
        elif transport_type == "plane":
            return Plane()
        else:
            raise ValueError(f"Неизвестный тип транспорта: {transport_type}")


if __name__ == "__main__":
    car = TransportFactory.create_transport("car")
    bicycle = TransportFactory.create_transport("bicycle")
    plane = TransportFactory.create_transport("plane")

    car.move()
    bicycle.move()
    plane.move()

    try:
        unknown_transport = TransportFactory.create_transport("unknown")
    except ValueError as e:
        print(e)
